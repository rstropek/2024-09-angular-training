import { AsyncPipe } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import {
  Component,
  effect,
  inject,
  Signal,
  signal,
  WritableSignal,
} from '@angular/core';
import {
  takeUntilDestroyed,
  toObservable,
  toSignal,
} from '@angular/core/rxjs-interop';
import {
  BehaviorSubject,
  catchError,
  finalize,
  firstValueFrom,
  Observable,
  Subject,
  switchMap,
  tap,
} from 'rxjs';

type PokeapiResponse = {
  count: number;
  next: string;
  previous: string;
  results: {
    name: string;
    url: string;
  }[];
};

@Component({
  selector: 'app-pokelist',
  standalone: true,
  imports: [AsyncPipe],
  templateUrl: './pokelist.component.html',
  styleUrl: './pokelist.component.css',
})
export class PokelistComponent {
  private load$ = new BehaviorSubject<boolean>(true);

  httpClient = inject(HttpClient);
  pokelist = signal<PokeapiResponse | undefined>(undefined);
  errormsg = signal('');
  page = signal(0);
  isLoading = signal(false);

  constructor() {
    this.load$
      .pipe(
        tap(() => this.isLoading.set(true)),
        switchMap(() =>
          this.httpClient
            .get<PokeapiResponse>(
              `https://pokeapi.co/api/v2/pokemon?offset=${this.page()}`
            )
            .pipe(finalize(() => this.isLoading.set(false)))
        ),
        catchError((err) => {
          this.errormsg.set(err.message);
          return [];
        }),
        takeUntilDestroyed()
      )
      .subscribe((response) => this.pokelist.set(response));
  }

  onNext() {
    this.page.update((p) => p + 20);
    this.load$.next(true);
  }
}
